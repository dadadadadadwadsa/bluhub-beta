-- example script by https://github.com/mstudio45/LinoriaLib/blob/main/Example.lua and modified by deivid
-- You can suggest changes with a pull request or something
-- https://discord.gg/NGMu2ZF4dr

local repo = "https://raw.githubusercontent.com/deividcomsono/Obsidian/main/"
local Library = loadstring(game:HttpGet(repo .. "Library.lua"))()
local ThemeManager = loadstring(game:HttpGet(repo .. "addons/ThemeManager.lua"))()
local SaveManager = loadstring(game:HttpGet(repo .. "addons/SaveManager.lua"))()

getgenv().BoxOutline = false -- or false to disable

local players = game.Players
local runserv = game:GetService("RunService")
local localPlayer = players.LocalPlayer

local cache = {}
local camera = workspace.CurrentCamera

local function createDrawing(name, properties)
	local drawing = Drawing.new(name)
	for i, v in pairs(properties) do
		drawing[i] = v
	end
	return drawing
end

local function addPlayerBox(player)
	if cache[player] then return end

	cache[player] = {
		boxOutline = createDrawing("Square", {
			Thickness = 2,
			Color = Color3.new(0, 0, 0),
			Visible = false,
			Filled = false,
		}),

		box = createDrawing("Square", {
			Thickness = 1,
			Color = Color3.new(1, 1, 1),
			Visible = false,
			Filled = false,
		}),
	}
end

local function removePlayerBox(player)
	if cache[player] then
		cache[player].boxOutline:Destroy()
		cache[player].box:Destroy()
		cache[player] = nil
	end
end

for _, v in pairs(players:GetPlayers()) do
	if v ~= localPlayer then
		addPlayerBox(v)
	end
end

players.PlayerAdded:Connect(function(player)
	if player ~= localPlayer then
		addPlayerBox(player)
	end
end)

players.PlayerRemoving:Connect(removePlayerBox)
runserv.RenderStepped:Connect(function()
	if not getgenv().BoxOutline then
		for _, espCache in pairs(cache) do
			espCache.boxOutline.Visible = false
			espCache.box.Visible = false
		end
		return
	end

	for player, espCache in pairs(cache) do
		local boxOutline = espCache.boxOutline
		local box = espCache.box

		local character = player.Character
		if character and character:FindFirstChild("HumanoidRootPart") then
			local center, size = character:GetBoundingBox()
			local centerSP, onScreen = camera:WorldToViewportPoint(center.Position)

			if onScreen then
				local topPos = camera:WorldToViewportPoint(center.Position + Vector3.new(0, size.Y / 2, 0))
				local bottomPos = camera:WorldToViewportPoint(center.Position - Vector3.new(0, size.Y / 2, 0))

				local height = math.abs(topPos.Y - bottomPos.Y)
				local width = height / 1.2

				local position = Vector2.new(centerSP.X - width / 2, centerSP.Y - height / 2)

				boxOutline.Size = Vector2.new(width, height)
				boxOutline.Position = position

				box.Size = boxOutline.Size
				box.Position = boxOutline.Position

				boxOutline.Visible = true
				box.Visible = true
			else
				boxOutline.Visible = false
				box.Visible = false
			end
		else
			boxOutline.Visible = false
			box.Visible = false
		end
	end
end)

local player = game.Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hum = char:WaitForChild("Humanoid")

player.CharacterAdded:Connect(function(Character)
	char = Character
	hum = char:WaitForChild("Humanoid")
end)

local Options = Library.Options
local Toggles = Library.Toggles

Library.ForceCheckbox = false -- Forces AddToggle to AddCheckbox
Library.ShowToggleFrameInKeybinds = true -- Make toggle keybinds work inside the keybinds UI (aka adds a toggle to the UI). Good for mobile users (Default value = true)

local Window = Library:CreateWindow({
	-- Set Center to true if you want the menu to appear in the center
	-- Set AutoShow to true if you want the menu to appear when it is created
	-- Set Resizable to true if you want to have in-game resizable Window
	-- Set MobileButtonsSide to "Left" or "Right" if you want the ui toggle & lock buttons to be on the left or right side of the window
	-- Set ShowCustomCursor to false if you don't want to use the Linoria cursor
	-- NotifySide = Changes the side of the notifications (Left, Right) (Default value = Left)
	-- Position and Size are also valid options here
	-- but you do not need to define them unless you are changing them :)

	Title = "Flipped ",
	Footer = "version: 1.0.0",
	Icon = nil,
	NotifySide = "Right",
	ShowCustomCursor = false,
})

Library:Notify({
    Title = "Loaded GUI",
    Description = "(discord.gg/NGMu2ZF4dr)",
    Time = 5, -- Duration in seconds
    SoundId = 7695856187 -- Optional sound ID
})

-- CALLBACK NOTE:
-- Passing in callback functions via the initial element parameters (i.e. Callback = function(Value)...) works
-- HOWEVER, using Toggles/Options.INDEX:OnChanged(function(Value) ... ) is the RECOMMENDED way to do this.
-- I strongly recommend decoupling UI code from logic code. i.e. Create your UI elements FIRST, and THEN setup :OnChanged functions later.

-- You do not have to set your tabs & groups up this way, just a prefrence.
-- You can find more icons in https://lucide.dev/
local Tabs = {
	-- Creates a new tab titled Main
	Main = Window:AddTab("Main", "user"),
	--Key = Window:AddKeyTab("Key System"),
	["UI Settings"] = Window:AddTab("UI Settings", "settings"),
}


--[[
Example of how to add a warning box to a tab; the title AND text support rich text formatting.

local WarningTab = Tabs["UI Settings"]:AddTab("Warning Box", "user")

WarningTab:UpdateWarningBox({
	Visible = true,
	Title = "Warning",
	Text = "This is a warning box!",
})

]]

-- Groupbox and Tabbox inherit the same functions
-- except Tabboxes you have to call the functions on a tab (Tabbox:AddTab(name))
local LeftGroupBox = Tabs.Main:AddLeftGroupbox("Main Stuff")
local RightGroupBox = Tabs.Main:AddRightGroupbox("OP Stuff")

-- We can also get our Main tab via the following code:
-- local LeftGroupBox = Window.Tabs.Main:AddLeftGroupbox('Groupbox')

-- Tabboxes are a tiny bit different, but here's a basic example:
--[[

local TabBox = Tabs.Main:AddLeftTabbox() -- Add Tabbox on left side

local Tab1 = TabBox:AddTab('Tab 1')
local Tab2 = TabBox:AddTab('Tab 2')

-- You can now call AddToggle, etc on the tabs you added to the Tabbox
]]

-- Groupbox:AddToggle
-- Arguments: Index, Options

-- Fetching a toggle object for later use:
-- Toggles.MyToggle.Value

-- Toggles is a table added to getgenv() by the library
-- You index Toggles with the specified index, in this case it is 'MyToggle'
-- To get the state of the toggle you do toggle.Value

-- Calls the passed function when the toggle is updated
-- This should print to the console: "My toggle state changed! New value: false"

local MyButton = LeftGroupBox:AddButton({
	Text = "Speed Boost",
	Func = function()
		hum.WalkSpeed += 4
	--Library:Notify({
       -- Title = "Success",
       -- Description = "Operation completed successfully",
       -- Time = 0.5, -- Duration in seconds
       -- SoundId = 123456789 -- Optional sound ID
    --})
	end,
	DoubleClick = false,

	Tooltip = "Speed Boost ig",
	DisabledTooltip = "I am disabled nooo!",

	Disabled = false, -- Will disable the button (true / false)
	Visible = true, -- Will make the button invisible (true / false)
	Risky = false, -- Makes the text red (the color can be changed using Library.Scheme.Red) (Default value = false)
})

-- 1/15/23
-- Deprecated old way of creating buttons in favor of using a table
-- Added DoubleClick button functionality

--[[
	Groupbox:AddButton
	Arguments: {
		Text = string,
		Func = function,
		DoubleClick = boolean
		Tooltip = string,
	}

	You can call :AddButton on a button to add a SubButton!
]]


--[[
	NOTE: You can chain the button methods!
	EXAMPLE:

	LeftGroupBox:AddButton({ Text = 'Kill all', Func = Functions.KillAll, Tooltip = 'This will kill everyone in the game!' })
		:AddButton({ Text = 'Kick all', Func = Functions.KickAll, Tooltip = 'This will kick everyone in the game!' })
]]

-- Groupbox:AddLabel
-- Arguments: Text, DoesWrap, Idx
-- Arguments: Idx, Options

-- Options is a table added to getgenv() by the library
-- You index Options with the specified index, in this case it is 'SecondTestLabel' & 'TestLabel'
-- To set the text of the label you do label:SetText

-- Options.TestLabel:SetText("first changed!")
-- Options.SecondTestLabel:SetText("second changed!")

-- Groupbox:AddDivider
-- Arguments: None
--LeftGroupBox:AddDivider()

--[[
	Groupbox:AddSlider
	Arguments: Idx, SliderOptions

	SliderOptions: {
		Text = string,
		Default = number,
		Min = number,
		Max = number,
		Suffix = string,
		Rounding = number,
		Compact = boolean,
		HideMax = boolean,
	}

	Text, Default, Min, Max, Rounding must be specified.
	Suffix is optional.
	Rounding is the number of decimal places for precision.

	Compact will hide the title label of the Slider

	HideMax will only display the value instead of the value & max value of the slider
	Compact will do the same thing
]]
LeftGroupBox:AddSlider("SpeedSlider", {
	Text = "Speed Slider",
	Default = 16,
	Min = 0,
	Max = 150,
	Rounding = 0,
	Compact = false,

	Callback = function(Value)
		--print("[cb] MySlider was changed! New value:", Value)
		hum.WalkSpeed = Value
	end,

	Tooltip = "Changes Ur Speed To the slider's value", -- Information shown when you hover over the slider
	DisabledTooltip = "disabled", -- Information shown when you hover over the slider while it's disabled

	Disabled = false, -- Will disable the slider (true / false)
	Visible = true, -- Will make the slider invisible (true / false)
})

-- Options is a table added to getgenv() by the library
-- You index Options with the specified index, in this case it is 'MySlider'
-- To get the value of the slider you do slider.Value

local Number = Options.SpeedSlider.Value
--Options.SpeedSlider:OnChanged(function()
	--print("SpeedSlider was changed! New value:", Options.MySlider.Value)
--end)

-- This should print to the console: "MySlider was changed! New value: 3"
Options.SpeedSlider:SetValue(16)

-- Groupbox:AddInput
-- Arguments: Idx, Info
LeftGroupBox:AddInput("Speed Textbox", {
	Default = "WalkSpeed",
	Numeric = true, -- true / false, only allows numbers
	Finished = false, -- true / false, only calls callback when you press enter
	ClearTextOnFocus = true, -- true / false, if false the text will not clear when textbox focused

	Text = "Speed Textbox",
	Tooltip = "Changes ur speed to the text", -- Information shown when you hover over the textbox

	Placeholder = "Placeholder text", -- placeholder text when the box is empty
	-- MaxLength is also an option which is the max length of the text

	Callback = function(Value)
		hum.WalkSpeed = Value
	end,
})

LeftGroupBox:AddDivider()

local MyButton = LeftGroupBox:AddButton({
	Text = "JumpPower Boost",
	Func = function()
		hum.WalkSpeed += 4
	end,
	DoubleClick = false,

	Tooltip = "JumpPower Boost ig",
	DisabledTooltip = "I am disabled nooo!",

	Disabled = false, -- Will disable the button (true / false)
	Visible = true, -- Will make the button invisible (true / false)
	Risky = false, -- Makes the text red (the color can be changed using Library.Scheme.Red) (Default value = false)
})

LeftGroupBox:AddInput("JumpPower Textbox", {
	Default = "JumpPower",
	Numeric = true, -- true / false, only allows numbers
	Finished = false, -- true / false, only calls callback when you press enter
	ClearTextOnFocus = true, -- true / false, if false the text will not clear when textbox focused

	Text = "JumpPower Textbox",
	Tooltip = "Changes ur Jump Power to the text", -- Information shown when you hover over the textbox

	Placeholder = "Placeholder text", -- placeholder text when the box is empty
	-- MaxLength is also an option which is the max length of the text

	Callback = function(Value)
		hum.JumpPower = Value
	end,
})

LeftGroupBox:AddSlider("JumpPower", {
	Text = "JumpPower Slider",
	Default = 50,
	Min = 0,
	Max = 300,
	Rounding = 0,
	Compact = false,

	Callback = function(Value)
		--print("[cb] MySlider was changed! New value:", Value)
		hum.JumpPower = Value
	end,

	Tooltip = "Changes Ur JumpPower To the slider's value", -- Information shown when you hover over the slider
	DisabledTooltip = "disabled", -- Information shown when you hover over the slider while it's disabled

	Disabled = false, -- Will disable the slider (true / false)
	Visible = true, -- Will make the slider invisible (true / false)
})

LeftGroupBox:AddDivider()

LeftGroupBox:AddSlider("FOV", {
	Text = "FOV",
	Default = 70,
	Min = 0,
	Max = 300,
	Rounding = 0,
	Compact = false,

	Callback = function(Value)
		--print("[cb] MySlider was changed! New value:", Value)
                game.workspace.CurrentCamera.FieldOfView = Value
	end,

	Tooltip = "Changes Ur FOV [Field of view] To the slider's value", -- Information shown when you hover over the slider
	DisabledTooltip = "disabled", -- Information shown when you hover over the slider while it's disabled

	Disabled = false, -- Will disable the slider (true / false)
	Visible = true, -- Will make the slider invisible (true / false)
})

local ESPBox = RightGroupBox:AddToggle("ESPBox", {
    Text = "ESPBox",
    Default = false,
    Tooltip = "Adds an Box Outline to all players",
    Callback = function(Value)
		getgenv().BoxOutline = not getgenv().BoxOutline
    end
})


-- Groupbox:AddDropdown
-- Arguments: Idx, Info

-- Long text label to demonstrate UI scrolling behaviour.

Library:OnUnload(function()
	print("Unloaded!")
end)

-- Anything we can do in a Groupbox, we can do in a Key tab (AddToggle, AddSlider, AddLabel, etc etc...)

-- UI Settings
local MenuGroup = Tabs["UI Settings"]:AddLeftGroupbox("Menu")

MenuGroup:AddToggle("KeybindMenuOpen", {
	Default = Library.KeybindFrame.Visible,
	Text = "Open Keybind Menu",
	Callback = function(value)
		Library.KeybindFrame.Visible = value
	end,
})
MenuGroup:AddToggle("ShowCustomCursor", {
	Text = "Custom Cursor",
	Default = true,
	Callback = function(Value)
		Library.ShowCustomCursor = Value
	end,
})
MenuGroup:AddDropdown("NotificationSide", {
	Values = { "Left", "Right" },
	Default = "Right",

	Text = "Notification Side",

	Callback = function(Value)
		Library:SetNotifySide(Value)
	end,
})
MenuGroup:AddDropdown("DPIDropdown", {
	Values = { "50%", "75%", "100%", "125%", "150%", "175%", "200%" },
	Default = "100%",

	Text = "DPI Scale",

	Callback = function(Value)
		Value = Value:gsub("%%", "")
		local DPI = tonumber(Value)

		Library:SetDPIScale(DPI)
	end,
})
MenuGroup:AddDivider()
MenuGroup:AddLabel("Menu bind")
	:AddKeyPicker("MenuKeybind", { Default = "RightShift", NoUI = true, Text = "Menu keybind" })

MenuGroup:AddButton("Unload", function()
	Library:Unload()
end)

Library.ToggleKeybind = Options.MenuKeybind -- Allows you to have a custom keybind for the menu

-- Addons:
-- SaveManager (Allows you to have a configuration system)
-- ThemeManager (Allows you to have a menu theme system)

-- Hand the library over to our managers
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

-- Ignore keys that are used by ThemeManager.
-- (we dont want configs to save themes, do we?)
SaveManager:IgnoreThemeSettings()

-- Adds our MenuKeybind to the ignore list
-- (do you want each config to have a different menu key? probably not.)
SaveManager:SetIgnoreIndexes({ "MenuKeybind" })

-- use case for doing it this way:
-- a script hub could have themes in a global folder
-- and game configs in a separate folder per game
ThemeManager:SetFolder("MyScriptHub")
SaveManager:SetFolder("MyScriptHub/specific-game")
SaveManager:SetSubFolder("specific-place") -- if the game has multiple places inside of it (for example: DOORS)
-- you can use this to save configs for those places separately
-- The path in this script would be: MyScriptHub/specific-game/settings/specific-place
-- [ This is optional ]

-- Builds our config menu on the right side of our tab
SaveManager:BuildConfigSection(Tabs["UI Settings"])

-- Builds our theme menu (with plenty of built in themes) on the left side
-- NOTE: you can also call ThemeManager:ApplyToGroupbox to add it to a specific groupbox
ThemeManager:ApplyToTab(Tabs["UI Settings"])

-- You can use the SaveManager:LoadAutoloadConfig() to load a config
-- which has been marked to be one that auto loads!
SaveManager:LoadAutoloadConfig()
